实现[流程自动化]，[断点续做]，[查错] 功能。程序需指定输出目录outdir,另需要2个文件：
1.格式化的流程脚本
  a.配置运行方式'qsub' [yes,no,yet,exec]
    yes 表示当前命令以qsub进行投递到计算节点
    yet 表示命令中已包含qsub/doqsub命令.  #对此在[断点续做]的支持不好
    no  表示当前命令在当前结点直接运行；如任务时间长，内存、cpu需求量大，请用以上两种方式运行;default=no
    exec则在当前python中运行，可很好地实现参数的定制化；#注：在```中，若无python标记，则会先写进脚本中，然后再运行 exec "python 脚本",参数定制功能会受影响
  b.命令的标签Label，用以区分命令及log文件run_{Lable}*sh[.][e,o][number];default=None；若为None，则[断点续做] [查错]功能会受影响
  c.输出目录'workpath'; default=“上一命令的workpath” or outdir
  d.qsub所用的资源 ncpus mem host,默认ncpus=1 mem=10M；仅对yes 运行方式有效
2.参数配置文件
  以key=value的形式指定流程中的参数；可以[group]来对参数进行分组。

结果会输出在outdir下，每步的结果在workpath中。以下是输入文件，运行方式及结果的示例：

##################################################################
##格式化的流程脚本
##################################################################
#Label=a.1 qsub=yes [yes,no,yet] ncpus=1 mem=2G workpath=%(outdir)s/1.1 #host=               #通过行首#对下行命令的运行参数进行定制,qusb到集群
echo command1.1 %(c1)s && sleep 10
#Label=a.2 qsub=yet      [yet] ncpus=1 mem=2G workpath=%(outdir)s/1.2 #host=                 #以commands调用,并获取job id
doqsub "echo command1.2 %(c1)s && sleep 20"
     #

``` Label=a.3 qsub=yet      [yet] ncpus=1 mem=2G workpath=%(outdir)s/1.3 #host=              #支持多任务投递
for i in {1..5};do echo echo command1.3.${i} %(c1)s >test1.3.${i}.sh;done
ls test1.3*sh |while read i;do doqsub ${i};done
```

#Label=b qsub=no  [yes,no,yet] ncpus=1 mem=2G workpath=%(outdir)s/2 #host=                   #以commands调用,commands.getstatusoutput
echo command2 %(c2)s

``` Label=c qsub=yes [yes,no,yet] ncpus=1 mem=2G  workpath=%(outdir)s/3                      #```为#的多行形式，```之后未紧跟python等字样，则使用sh解释器
"echo command3.1 %s "%( "ta" if 1<0 else 'zsc')                                              #command3 %s 为可修改的命令,sh执行;%s 不能与%(c3)s同时出现
echo command3.2 %(c3)s
```

```python Label=d qsub=exec  [yes,no,yet,exec] ncpus=1 mem=3G workpath=%(outdir)s/4          #以python 执行,暂不支持其它语言
  #comand4 注释                                                                              #在```内#不能在行首
global test_string                                                                           #为后面的命令传参
if len('%(outdir)s') >5:
  print "length of outdir gt 5 %(c4)s"
  test_string="{C4} length of outdir gt 5 %(c4)s"               
else:
  print "ength of outdir lt 5 %(c5)s"
  test_string="{C4} length of outdir lt 5 %(c4)s"
```

#Label=e qsub=yes [yes,no,yet] ncpus=1 mem=1G workpath=%(outdir)s/5 require_job=a.1,a.2,b,c,d  #等待a.1,a.2,b,c,d任务执行完毕，才会执行此命令
"echo command5 %s "%(test_string) + "%(c5)s"                                                   #若同时使用%s 、%(c5)s两种格式化方法，可用+分开,test_string为上一步的值

####################################################################
##config 文件
####################################################################
[common_param]
c1=COMMAND1
c2=COMMAND2
c3=COMMAND3
c4=COMMAND4
c5=COMMAND5

####################################################################
##测试
####################################################################

#to install:

> tar zxvf XXX.tar.gz
> cd XXX
> python setup.py build
> python setup.py install

$run_pipeline  -f test_config.txt -o test_out/ test_pipe.txt
[Pipe] start... 2016-09-19 14:03:12
[a.1] start... 2016-09-19 14:03:12
[a.2] start... 2016-09-19 14:03:12
[a.3] start... 2016-09-19 14:03:12
[b] start... 2016-09-19 14:03:14
[c] start... 2016-09-19 14:03:14
[d] start... 2016-09-19 14:03:14
length of outdir gt 5 COMMAND4
[e] start... 2016-09-19 14:03:39
[END] completed... 2016-09-19 14:03:44
Time consumed 31.8602759838 seconds


####################################################################
##测试结果
####################################################################
test_out/
├── 1.1
│   ├── run_a.1.649924.sh
│   ├── run_a.1.649924.sh.e59520
│   └── run_a.1.649924.sh.o59520
├── 1.2
│   ├── run.649927.sh
│   ├── run.649927.sh.e
│   ├── run.649927.sh.e59521
│   ├── run.649927.sh.o
│   └── run.649927.sh.o59521
├── 1.3
│   ├── run.649929.sh
│   ├── run.649932.sh
│   ├── run.649934.sh
│   ├── run.649936.sh
│   ├── run.649939.sh
│   ├── test1.3.1.sh
│   ├── test1.3.1.sh.e
│   ├── test1.3.1.sh.e59522
│   ├── test1.3.1.sh.o
│   ├── test1.3.1.sh.o59522
│   ├── test1.3.2.sh
│   ├── test1.3.2.sh.e
│   ├── test1.3.2.sh.e59523
│   ├── test1.3.2.sh.o
│   ├── test1.3.2.sh.o59523
│   ├── test1.3.3.sh
│   ├── test1.3.3.sh.e
│   ├── test1.3.3.sh.e59524
│   ├── test1.3.3.sh.o
│   ├── test1.3.3.sh.o59524
│   ├── test1.3.4.sh
│   ├── test1.3.4.sh.e
│   ├── test1.3.4.sh.e59525
│   ├── test1.3.4.sh.o
│   ├── test1.3.4.sh.o59525
│   ├── test1.3.5.sh
│   ├── test1.3.5.sh.e
│   ├── test1.3.5.sh.e59526
│   ├── test1.3.5.sh.o
│   └── test1.3.5.sh.o59526
├── 2
├── 3
│   ├── run_c.649940.sh
│   ├── run_c.649940.sh.e59527
│   └── run_c.649940.sh.o59527
├── 4
└── 5
    ├── run_e.650192.sh
    ├── run_e.650192.sh.e59528
    └── run_e.650192.sh.o59528
